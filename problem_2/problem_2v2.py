#!/usr/bin/env python

# Each new term in the Fibonacci sequence is generated by adding the
# previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,...
#
# By considering the terms in the Fibonacci sequence whose
# values do not exceed four million, find the sum of the even-valued terms.

# It is notable that every third Fibonacci number is even and the following
# recursive relation holds: E(n) = 4E(n-1) + E(n-2)

def SumFibonacciEvenTerms(max_term_value):

    """
    >>> SumFibonacciEvenTerms(6)
    2
    >>> SumFibonacciEvenTerms(9)
    10
    >>> SumFibonacciEvenTerms(10)
    10
    >>> SumFibonacciEvenTerms(35)
    44
    """

    term1 = 2
    term2 = 8
    sum_even_terms = term1

    while term2 < max_term_value:

        sum_even_terms += term2

        term1, term2 = term2, term1 + 4*term2

    return sum_even_terms

if __name__ == "__main__":

    import doctest

    from timeit import default_timer as timer

    doctest.testmod()

    max_term_value = 4e6
    #max_term_value = 10
    t0 = timer()

    print("result = {}".format(SumFibonacciEvenTerms(max_term_value)))
    print("time = {} ms".format((timer()-t0)*1e3))

